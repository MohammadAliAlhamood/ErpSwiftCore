// <auto-generated />
using System;
using ErpSwiftCore.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ErpSwiftCore.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ErpSwiftCore.Domain.AggregateRoots.AggregateInventoryRoots.Inventory", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QuantityOnHand")
                        .HasColumnType("int");

                    b.Property<int>("QuantityReserved")
                        .HasColumnType("int");

                    b.Property<Guid>("TenantID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WarehouseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("_quantityOnHand")
                        .HasColumnType("int")
                        .HasColumnName("QuantityOnHand");

                    b.HasKey("ID");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Entity_CreatedAt");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Entity_CreatedBy");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Entity_IsDeleted");

                    b.HasIndex("ProductID");

                    b.HasIndex("TenantID")
                        .HasDatabaseName("IX_TenantID");

                    b.HasIndex("WarehouseID");

                    b.ToTable("Inventories", t =>
                        {
                            t.Property("QuantityOnHand")
                                .HasColumnName("QuantityOnHand1");
                        });
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.AggregateRoots.AggregateInventoryRoots.InventoryPolicy", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AutoReorderEnabled")
                        .HasColumnType("bit");

                    b.Property<int?>("AutoReorderQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CurrentStock")
                        .HasColumnType("int");

                    b.Property<Guid>("InventoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAutoReorderEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("MaxStockLevel")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("PolicyType")
                        .HasColumnType("int");

                    b.Property<int>("ReorderLevel")
                        .HasColumnType("int");

                    b.Property<Guid>("TenantID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Entity_CreatedAt");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Entity_CreatedBy");

                    b.HasIndex("InventoryID")
                        .IsUnique();

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Entity_IsDeleted");

                    b.HasIndex("TenantID")
                        .HasDatabaseName("IX_TenantID");

                    b.ToTable("InventoryPolicies");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.AggregateRoots.AggregateInventoryRoots.InventoryTransaction", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InventoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("RelatedJournalEntryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RunningBalance")
                        .HasColumnType("int");

                    b.Property<Guid>("TenantID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Entity_CreatedAt");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Entity_CreatedBy");

                    b.HasIndex("InventoryID");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Entity_IsDeleted");

                    b.HasIndex("RelatedJournalEntryID");

                    b.HasIndex("TenantID")
                        .HasDatabaseName("IX_TenantID");

                    b.ToTable("InventoryTransactions");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityAuth.ActivityLog", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActivityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeviceInfo")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Entity_CreatedAt");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Entity_CreatedBy");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Entity_IsDeleted");

                    b.HasIndex("UserId");

                    b.ToTable("ActivityLogs", (string)null);
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityAuth.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSubscribedToSecurityNotifications")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("TenantId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityAuth.SecurityAlert", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AlertTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Entity_CreatedAt");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Entity_CreatedBy");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Entity_IsDeleted");

                    b.HasIndex("UserId");

                    b.ToTable("SecurityAlerts", (string)null);
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityAuth.Session", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeviceInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Entity_CreatedAt");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Entity_CreatedBy");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Entity_IsDeleted");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions", (string)null);
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityAuth.SocialAccount", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProviderUserId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Entity_CreatedAt");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Entity_CreatedBy");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Entity_IsDeleted");

                    b.HasIndex("UserId");

                    b.ToTable("SocialAccounts", (string)null);
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityAuth.TrustedDevice", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Entity_CreatedAt");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Entity_CreatedBy");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Entity_IsDeleted");

                    b.HasIndex("UserId");

                    b.ToTable("TrustedDevices", (string)null);
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityBilling.Invoice", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("InvoiceStatus")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsFinalized")
                        .HasColumnType("bit");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("PartyID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Entity_CreatedAt");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Entity_CreatedBy");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Entity_IsDeleted");

                    b.HasIndex("OrderId");

                    b.HasIndex("PartyID");

                    b.HasIndex("TenantID")
                        .HasDatabaseName("IX_TenantID");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityBilling.InvoiceApproval", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TenantID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Entity_CreatedAt");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Entity_CreatedBy");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Entity_IsDeleted");

                    b.HasIndex("TenantID")
                        .HasDatabaseName("IX_TenantID");

                    b.ToTable("InvoiceApprovals");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityBilling.InvoiceDiscount", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DiscountName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("DiscountRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("TenantID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Entity_CreatedAt");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Entity_CreatedBy");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Entity_IsDeleted");

                    b.HasIndex("TenantID")
                        .HasDatabaseName("IX_TenantID");

                    b.ToTable("InvoiceDiscounts");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityBilling.InvoiceLine", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("TenantID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Entity_CreatedAt");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Entity_CreatedBy");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Entity_IsDeleted");

                    b.HasIndex("ProductId");

                    b.HasIndex("TenantID")
                        .HasDatabaseName("IX_TenantID");

                    b.ToTable("InvoiceLines");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityBilling.InvoiceTax", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TaxName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("TenantID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Entity_CreatedAt");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Entity_CreatedBy");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Entity_IsDeleted");

                    b.HasIndex("TenantID")
                        .HasDatabaseName("IX_TenantID");

                    b.ToTable("InvoiceTaxes");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityBilling.Order", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<int>("OrderType")
                        .HasColumnType("int");

                    b.Property<Guid>("PartyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Entity_CreatedAt");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Entity_CreatedBy");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Entity_IsDeleted");

                    b.HasIndex("PartyId");

                    b.HasIndex("TenantID")
                        .HasDatabaseName("IX_TenantID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityBilling.OrderLine", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("TenantID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Entity_CreatedAt");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Entity_CreatedBy");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Entity_IsDeleted");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TenantID")
                        .HasDatabaseName("IX_TenantID");

                    b.ToTable("OrderLines");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityBilling.Party", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TaxNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("TenantID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Entity_CreatedAt");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Entity_CreatedBy");

                    b.HasIndex("CustomerId")
                        .IsUnique()
                        .HasFilter("[CustomerId] IS NOT NULL");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Entity_IsDeleted");

                    b.HasIndex("SupplierId")
                        .IsUnique()
                        .HasFilter("[SupplierId] IS NOT NULL");

                    b.HasIndex("TenantID")
                        .HasDatabaseName("IX_TenantID");

                    b.ToTable("Parties", (string)null);
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityBilling.Payment", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsReconciled")
                        .HasColumnType("bit");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentReference")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("TenantID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Entity_CreatedAt");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Entity_CreatedBy");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Entity_IsDeleted");

                    b.HasIndex("TenantID")
                        .HasDatabaseName("IX_TenantID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityCRM.Customer", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("CreditLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NationalID")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Entity_CreatedAt");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Entity_CreatedBy");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Entity_IsDeleted");

                    b.HasIndex("TenantID")
                        .HasDatabaseName("IX_TenantID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityCRM.Supplier", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("MaxSupplyLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("TenantID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Entity_CreatedAt");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Entity_CreatedBy");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Entity_IsDeleted");

                    b.HasIndex("TenantID")
                        .HasDatabaseName("IX_TenantID");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityFinancial.Account", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("TenantID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("AccountNumber")
                        .HasDatabaseName("IX_Account_AccountNumber");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Entity_CreatedAt");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Entity_CreatedBy");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Entity_IsDeleted");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Account_Name");

                    b.HasIndex("TenantID")
                        .HasDatabaseName("IX_TenantID");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityFinancial.CostCenter", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CenterName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("TenantID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Entity_CreatedAt");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Entity_CreatedBy");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Entity_IsDeleted");

                    b.HasIndex("TenantID")
                        .HasDatabaseName("IX_TenantID");

                    b.ToTable("CostCenters");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityFinancial.CustomFinancialReportResult", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ReportName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("TenantID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("CompanyID");

                    b.ToTable("CustomFinancialReportResults");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityFinancial.JournalEntry", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EntryNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPosted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Entity_CreatedAt");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Entity_CreatedBy");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Entity_IsDeleted");

                    b.HasIndex("TenantID")
                        .HasDatabaseName("IX_TenantID");

                    b.ToTable("JournalEntries");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityFinancial.JournalEntryLine", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("CostCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDebit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("JournalEntryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("AccountId");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Entity_CreatedAt");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Entity_CreatedBy");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Entity_IsDeleted");

                    b.HasIndex("JournalEntryId");

                    b.HasIndex("TenantID")
                        .HasDatabaseName("IX_TenantID");

                    b.ToTable("JournalEntryLines");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityInventory.InventoryAdjustment", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AdjustmentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QuantityChanged")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid>("TenantID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WarehouseID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Entity_CreatedAt");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Entity_CreatedBy");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Entity_IsDeleted");

                    b.HasIndex("ProductID");

                    b.HasIndex("TenantID")
                        .HasDatabaseName("IX_TenantID");

                    b.HasIndex("WarehouseID");

                    b.ToTable("InventoryAdjustments");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityInventory.StockTransfer", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FromWarehouseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Notes")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("TenantID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ToWarehouseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TransferDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Entity_CreatedAt");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Entity_CreatedBy");

                    b.HasIndex("FromWarehouseID");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Entity_IsDeleted");

                    b.HasIndex("ProductID");

                    b.HasIndex("TenantID")
                        .HasDatabaseName("IX_TenantID");

                    b.HasIndex("ToWarehouseID");

                    b.ToTable("StockTransfers");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityInventory.Warehouse", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsOperational")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStorage")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("TenantID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("BranchID");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Entity_CreatedAt");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Entity_CreatedBy");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Entity_IsDeleted");

                    b.HasIndex("TenantID")
                        .HasDatabaseName("IX_TenantID");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityLogging.LogEntry", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Category or area of the event, e.g. 'Inventory', 'Auth'");

                    b.Property<string>("CorrelationId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Correlation ID to trace related operations");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DetailsJson")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("JSON with additional details (old/new values, context)");

                    b.Property<string>("EntityKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Identifier of the affected entity as string");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Name of the entity affected, e.g. 'Budget'");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("Level")
                        .HasColumnType("int")
                        .HasComment("Severity level as int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Short message describing the event");

                    b.Property<DateTime>("OccurredAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("UTC timestamp when the event occurred");

                    b.Property<int>("Operation")
                        .HasColumnType("int")
                        .HasComment("Operation type as int");

                    b.Property<string>("Source")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Source of the event, e.g. service or machine name");

                    b.Property<string>("Tag")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Optional tag or small contextual code");

                    b.Property<Guid>("TenantID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("Category")
                        .HasDatabaseName("IX_LogEntry_Category");

                    b.HasIndex("CorrelationId")
                        .HasDatabaseName("IX_LogEntry_CorrelationId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Entity_CreatedAt");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_LogEntry_CreatedBy");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Entity_IsDeleted");

                    b.HasIndex("Level")
                        .HasDatabaseName("IX_LogEntry_Level");

                    b.HasIndex("TenantID")
                        .HasDatabaseName("IX_TenantID");

                    b.HasIndex("EntityName", "EntityKey")
                        .HasDatabaseName("IX_LogEntry_Entity");

                    b.HasIndex("TenantID", "OccurredAtUtc")
                        .HasDatabaseName("IX_LogEntry_Tenant_OccurredAt");

                    b.ToTable("LogEntries", "logging");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityNotification.Notification", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Channel")
                        .HasColumnType("int")
                        .HasComment("Delivery channel as int");

                    b.Property<string>("CorrelationId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastTriedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("PayloadJson")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("JSON payload with additional data");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasComment("Priority as int");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RetryCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("ScheduledAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("Status as int");

                    b.Property<Guid>("TenantID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasComment("Notification type as int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("CorrelationId")
                        .HasDatabaseName("IX_Notification_CorrelationId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Entity_CreatedAt");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Entity_CreatedBy");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Entity_IsDeleted");

                    b.HasIndex("RecipientId")
                        .HasDatabaseName("IX_Notification_Recipient");

                    b.HasIndex("ScheduledAt")
                        .HasDatabaseName("IX_Notification_ScheduledAt");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Notification_Status");

                    b.HasIndex("TenantID")
                        .HasDatabaseName("IX_TenantID");

                    b.HasIndex("RecipientId", "Status")
                        .HasDatabaseName("IX_Notification_Recipient_Status");

                    b.ToTable("Notifications", "notification");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityProduct.Product", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProductType")
                        .HasColumnType("int");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UnitOfMeasurementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Entity_CreatedAt");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Entity_CreatedBy");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Entity_IsDeleted");

                    b.HasIndex("TenantID")
                        .HasDatabaseName("IX_TenantID");

                    b.HasIndex("UnitOfMeasurementId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityProduct.ProductBundle", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ComponentProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("ParentProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("TenantID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UnitOfMeasurementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("ComponentProductId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Entity_CreatedAt");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Entity_CreatedBy");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Entity_IsDeleted");

                    b.HasIndex("ParentProductId");

                    b.HasIndex("TenantID")
                        .HasDatabaseName("IX_TenantID");

                    b.HasIndex("UnitOfMeasurementId");

                    b.ToTable("ProductBundles");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityProduct.ProductCategory", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Entity_CreatedAt");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Entity_CreatedBy");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Entity_IsDeleted");

                    b.HasIndex("ParentCategoryId");

                    b.HasIndex("TenantID")
                        .HasDatabaseName("IX_TenantID");

                    b.HasIndex("TenantID", "Name");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityProduct.ProductPrice", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PriceType")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Entity_CreatedAt");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Entity_CreatedBy");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Entity_IsDeleted");

                    b.HasIndex("ProductId");

                    b.HasIndex("TenantID")
                        .HasDatabaseName("IX_TenantID");

                    b.ToTable("ProductPrices");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityProduct.ProductTax", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("TenantID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Entity_CreatedAt");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Entity_CreatedBy");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Entity_IsDeleted");

                    b.HasIndex("ProductId");

                    b.HasIndex("TenantID")
                        .HasDatabaseName("IX_TenantID");

                    b.ToTable("ProductTaxes");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityProduct.ProductUnitConversion", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ConversionRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Factor")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("FromUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ToUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Entity_CreatedAt");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Entity_CreatedBy");

                    b.HasIndex("FromUnitId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Entity_IsDeleted");

                    b.HasIndex("ProductId");

                    b.HasIndex("TenantID")
                        .HasDatabaseName("IX_TenantID");

                    b.HasIndex("ToUnitId");

                    b.ToTable("ProductUnitConversions");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.EntityCompany.CompanySettings", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DefaultARAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DefaultCashAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DefaultDiscountsAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DefaultLanguage")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("DefaultRevenueAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DefaultTaxPayableAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("PaymentTerms")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("PayrollDeductionsAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PayrollPayableAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SalaryExpenseAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TimeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("CompanyID");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Entity_CreatedAt");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Entity_CreatedBy");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DefaultARAccountId");

                    b.HasIndex("DefaultCashAccountId");

                    b.HasIndex("DefaultDiscountsAccountId");

                    b.HasIndex("DefaultRevenueAccountId");

                    b.HasIndex("DefaultTaxPayableAccountId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Entity_IsDeleted");

                    b.HasIndex("PayrollDeductionsAccountId");

                    b.HasIndex("PayrollPayableAccountId");

                    b.HasIndex("SalaryExpenseAccountId");

                    b.ToTable("CompanySettingses");
                });

            modelBuilder.Entity("ErpSwiftCore.SharedKernel.Entities.Company", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IndustryType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LogoURL")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("TaxID")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WebsiteURL")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ID");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Entity_CreatedAt");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Entity_CreatedBy");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Entity_IsDeleted");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("ErpSwiftCore.SharedKernel.Entities.CompanyBranch", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("CompanyID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("CompanyID");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Entity_CreatedAt");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Entity_CreatedBy");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Entity_IsDeleted");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("ErpSwiftCore.SharedKernel.Entities.Currency", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("CurrencyName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Entity_CreatedAt");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Entity_CreatedBy");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Entity_IsDeleted");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            ID = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CurrencyCode = "USD",
                            CurrencyName = "US Dollar",
                            IsDeleted = false
                        },
                        new
                        {
                            ID = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CurrencyCode = "EUR",
                            CurrencyName = "Euro",
                            IsDeleted = false
                        },
                        new
                        {
                            ID = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CurrencyCode = "JPY",
                            CurrencyName = "Japanese Yen",
                            IsDeleted = false
                        },
                        new
                        {
                            ID = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CurrencyCode = "GBP",
                            CurrencyName = "British Pound",
                            IsDeleted = false
                        },
                        new
                        {
                            ID = new Guid("55555555-5555-5555-5555-555555555555"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CurrencyCode = "AUD",
                            CurrencyName = "Australian Dollar",
                            IsDeleted = false
                        },
                        new
                        {
                            ID = new Guid("66666666-6666-6666-6666-666666666666"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CurrencyCode = "CAD",
                            CurrencyName = "Canadian Dollar",
                            IsDeleted = false
                        },
                        new
                        {
                            ID = new Guid("77777777-7777-7777-7777-777777777777"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CurrencyCode = "CHF",
                            CurrencyName = "Swiss Franc",
                            IsDeleted = false
                        },
                        new
                        {
                            ID = new Guid("88888888-8888-8888-8888-888888888888"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CurrencyCode = "CNY",
                            CurrencyName = "Chinese Yuan",
                            IsDeleted = false
                        },
                        new
                        {
                            ID = new Guid("99999999-9999-9999-9999-999999999999"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CurrencyCode = "SEK",
                            CurrencyName = "Swedish Krona",
                            IsDeleted = false
                        },
                        new
                        {
                            ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CurrencyCode = "NZD",
                            CurrencyName = "New Zealand Dollar",
                            IsDeleted = false
                        },
                        new
                        {
                            ID = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CurrencyCode = "MXN",
                            CurrencyName = "Mexican Peso",
                            IsDeleted = false
                        },
                        new
                        {
                            ID = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CurrencyCode = "SGD",
                            CurrencyName = "Singapore Dollar",
                            IsDeleted = false
                        },
                        new
                        {
                            ID = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CurrencyCode = "HKD",
                            CurrencyName = "Hong Kong Dollar",
                            IsDeleted = false
                        },
                        new
                        {
                            ID = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CurrencyCode = "NOK",
                            CurrencyName = "Norwegian Krone",
                            IsDeleted = false
                        },
                        new
                        {
                            ID = new Guid("f1f1f1f1-f1f1-f1f1-f1f1-f1f1f1f1f1f1"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CurrencyCode = "KRW",
                            CurrencyName = "South Korean Won",
                            IsDeleted = false
                        },
                        new
                        {
                            ID = new Guid("f2f2f2f2-f2f2-f2f2-f2f2-f2f2f2f2f2f2"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CurrencyCode = "TRY",
                            CurrencyName = "Turkish Lira",
                            IsDeleted = false
                        },
                        new
                        {
                            ID = new Guid("f3f3f3f3-f3f3-f3f3-f3f3-f3f3f3f3f3f3"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CurrencyCode = "RUB",
                            CurrencyName = "Russian Ruble",
                            IsDeleted = false
                        },
                        new
                        {
                            ID = new Guid("f4f4f4f4-f4f4-f4f4-f4f4-f4f4f4f4f4f4"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CurrencyCode = "INR",
                            CurrencyName = "Indian Rupee",
                            IsDeleted = false
                        },
                        new
                        {
                            ID = new Guid("f5f5f5f5-f5f5-f5f5-f5f5-f5f5f5f5f5f5"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CurrencyCode = "BRL",
                            CurrencyName = "Brazilian Real",
                            IsDeleted = false
                        },
                        new
                        {
                            ID = new Guid("f6f6f6f6-f6f6-f6f6-f6f6-f6f6f6f6f6f6"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CurrencyCode = "ZAR",
                            CurrencyName = "South African Rand",
                            IsDeleted = false
                        },
                        new
                        {
                            ID = new Guid("f7f7f7f7-f7f7-f7f7-f7f7-f7f7f7f7f7f7"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CurrencyCode = "DKK",
                            CurrencyName = "Danish Krone",
                            IsDeleted = false
                        },
                        new
                        {
                            ID = new Guid("f8f8f8f8-f8f8-f8f8-f8f8-f8f8f8f8f8f8"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CurrencyCode = "PLN",
                            CurrencyName = "Polish Zloty",
                            IsDeleted = false
                        },
                        new
                        {
                            ID = new Guid("f9f9f9f9-f9f9-f9f9-f9f9-f9f9f9f9f9f9"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CurrencyCode = "THB",
                            CurrencyName = "Thai Baht",
                            IsDeleted = false
                        },
                        new
                        {
                            ID = new Guid("fafafafa-fafa-fafa-fafa-fafafafafafa"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CurrencyCode = "IDR",
                            CurrencyName = "Indonesian Rupiah",
                            IsDeleted = false
                        },
                        new
                        {
                            ID = new Guid("fbfbfbfb-fbfb-fbfb-fbfb-fbfbfbfbfbfb"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CurrencyCode = "MYR",
                            CurrencyName = "Malaysian Ringgit",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("ErpSwiftCore.SharedKernel.Entities.UnitOfMeasurement", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Entity_CreatedAt");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Entity_CreatedBy");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Entity_IsDeleted");

                    b.ToTable("UnitsOfMeasurement");

                    b.HasData(
                        new
                        {
                            ID = new Guid("33333333-3333-3333-3333-333333333333"),
                            Abbreviation = "kg",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Weight unit",
                            IsDeleted = false,
                            Name = "Kilogram"
                        },
                        new
                        {
                            ID = new Guid("44444444-4444-4444-4444-444444444444"),
                            Abbreviation = "m",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Length unit",
                            IsDeleted = false,
                            Name = "Meter"
                        },
                        new
                        {
                            ID = new Guid("55555555-5555-5555-5555-555555555555"),
                            Abbreviation = "g",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Weight unit",
                            IsDeleted = false,
                            Name = "Gram"
                        },
                        new
                        {
                            ID = new Guid("66666666-6666-6666-6666-666666666666"),
                            Abbreviation = "mg",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Weight unit",
                            IsDeleted = false,
                            Name = "Milligram"
                        },
                        new
                        {
                            ID = new Guid("77777777-7777-7777-7777-777777777777"),
                            Abbreviation = "t",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Weight unit (1000 kg)",
                            IsDeleted = false,
                            Name = "Ton"
                        },
                        new
                        {
                            ID = new Guid("88888888-8888-8888-8888-888888888888"),
                            Abbreviation = "mm",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Length unit",
                            IsDeleted = false,
                            Name = "Millimeter"
                        },
                        new
                        {
                            ID = new Guid("99999999-9999-9999-9999-999999999999"),
                            Abbreviation = "cm",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Length unit",
                            IsDeleted = false,
                            Name = "Centimeter"
                        },
                        new
                        {
                            ID = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Abbreviation = "km",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Length unit",
                            IsDeleted = false,
                            Name = "Kilometer"
                        },
                        new
                        {
                            ID = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            Abbreviation = "in",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Length unit",
                            IsDeleted = false,
                            Name = "Inch"
                        },
                        new
                        {
                            ID = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            Abbreviation = "ft",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Length unit",
                            IsDeleted = false,
                            Name = "Foot"
                        },
                        new
                        {
                            ID = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            Abbreviation = "yd",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Length unit",
                            IsDeleted = false,
                            Name = "Yard"
                        },
                        new
                        {
                            ID = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            Abbreviation = "mi",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Length unit",
                            IsDeleted = false,
                            Name = "Mile"
                        },
                        new
                        {
                            ID = new Guid("f1f1f1f1-f1f1-f1f1-f1f1-f1f1f1f1f1f1"),
                            Abbreviation = "L",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Volume unit",
                            IsDeleted = false,
                            Name = "Liter"
                        },
                        new
                        {
                            ID = new Guid("f2f2f2f2-f2f2-f2f2-f2f2-f2f2f2f2f2f2"),
                            Abbreviation = "mL",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Volume unit",
                            IsDeleted = false,
                            Name = "Milliliter"
                        },
                        new
                        {
                            ID = new Guid("f3f3f3f3-f3f3-f3f3-f3f3-f3f3f3f3f3f3"),
                            Abbreviation = "m³",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Volume unit",
                            IsDeleted = false,
                            Name = "Cubic Meter"
                        },
                        new
                        {
                            ID = new Guid("f4f4f4f4-f4f4-f4f4-f4f4-f4f4f4f4f4f4"),
                            Abbreviation = "cm³",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Volume unit",
                            IsDeleted = false,
                            Name = "Cubic Centimeter"
                        },
                        new
                        {
                            ID = new Guid("f5f5f5f5-f5f5-f5f5-f5f5-f5f5f5f5f5f5"),
                            Abbreviation = "m²",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Area unit",
                            IsDeleted = false,
                            Name = "Square Meter"
                        },
                        new
                        {
                            ID = new Guid("f6f6f6f6-f6f6-f6f6-f6f6-f6f6f6f6f6f6"),
                            Abbreviation = "ha",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Area unit (10,000 m²)",
                            IsDeleted = false,
                            Name = "Hectare"
                        },
                        new
                        {
                            ID = new Guid("f7f7f7f7-f7f7-f7f7-f7f7-f7f7f7f7f7f7"),
                            Abbreviation = "s",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Time unit",
                            IsDeleted = false,
                            Name = "Second"
                        },
                        new
                        {
                            ID = new Guid("f8f8f8f8-f8f8-f8f8-f8f8-f8f8f8f8f8f8"),
                            Abbreviation = "min",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Time unit (60 seconds)",
                            IsDeleted = false,
                            Name = "Minute"
                        },
                        new
                        {
                            ID = new Guid("f9f9f9f9-f9f9-f9f9-f9f9-f9f9f9f9f9f9"),
                            Abbreviation = "h",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Time unit (60 minutes)",
                            IsDeleted = false,
                            Name = "Hour"
                        },
                        new
                        {
                            ID = new Guid("fafafafa-fafa-fafa-fafa-fafafafafafa"),
                            Abbreviation = "d",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Time unit (24 hours)",
                            IsDeleted = false,
                            Name = "Day"
                        },
                        new
                        {
                            ID = new Guid("fbfbfbfb-fbfb-fbfb-fbfb-fbfbfbfbfbfb"),
                            Abbreviation = "pc",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Count unit",
                            IsDeleted = false,
                            Name = "Piece"
                        },
                        new
                        {
                            ID = new Guid("fcfcfcfc-fcfc-fcfc-fcfc-fcfcfcfcfcfc"),
                            Abbreviation = "dz",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Count unit (12 pieces)",
                            IsDeleted = false,
                            Name = "Dozen"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.AggregateRoots.AggregateInventoryRoots.Inventory", b =>
                {
                    b.HasOne("ErpSwiftCore.Domain.Entities.EntityProduct.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ErpSwiftCore.SharedKernel.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ErpSwiftCore.Domain.Entities.EntityInventory.Warehouse", "Warehouse")
                        .WithMany("Inventories")
                        .HasForeignKey("WarehouseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.AggregateRoots.AggregateInventoryRoots.InventoryPolicy", b =>
                {
                    b.HasOne("ErpSwiftCore.Domain.AggregateRoots.AggregateInventoryRoots.Inventory", "Inventory")
                        .WithOne("Policy")
                        .HasForeignKey("ErpSwiftCore.Domain.AggregateRoots.AggregateInventoryRoots.InventoryPolicy", "InventoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ErpSwiftCore.SharedKernel.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.AggregateRoots.AggregateInventoryRoots.InventoryTransaction", b =>
                {
                    b.HasOne("ErpSwiftCore.Domain.AggregateRoots.AggregateInventoryRoots.Inventory", "Inventory")
                        .WithMany("Transactions")
                        .HasForeignKey("InventoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ErpSwiftCore.Domain.Entities.EntityFinancial.JournalEntry", "RelatedJournalEntry")
                        .WithMany()
                        .HasForeignKey("RelatedJournalEntryID");

                    b.HasOne("ErpSwiftCore.SharedKernel.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Inventory");

                    b.Navigation("RelatedJournalEntry");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityAuth.ActivityLog", b =>
                {
                    b.HasOne("ErpSwiftCore.Domain.Entities.EntityAuth.ApplicationUser", "User")
                        .WithMany("ActivityLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityAuth.ApplicationUser", b =>
                {
                    b.HasOne("ErpSwiftCore.SharedKernel.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityAuth.SecurityAlert", b =>
                {
                    b.HasOne("ErpSwiftCore.Domain.Entities.EntityAuth.ApplicationUser", "User")
                        .WithMany("SecurityAlerts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityAuth.Session", b =>
                {
                    b.HasOne("ErpSwiftCore.Domain.Entities.EntityAuth.ApplicationUser", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityAuth.SocialAccount", b =>
                {
                    b.HasOne("ErpSwiftCore.Domain.Entities.EntityAuth.ApplicationUser", "User")
                        .WithMany("SocialAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityAuth.TrustedDevice", b =>
                {
                    b.HasOne("ErpSwiftCore.Domain.Entities.EntityAuth.ApplicationUser", "User")
                        .WithMany("TrustedDevices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityBilling.Invoice", b =>
                {
                    b.HasOne("ErpSwiftCore.SharedKernel.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ErpSwiftCore.Domain.Entities.EntityBilling.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ErpSwiftCore.Domain.Entities.EntityBilling.Party", null)
                        .WithMany("Invoices")
                        .HasForeignKey("PartyID");

                    b.HasOne("ErpSwiftCore.SharedKernel.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Currency");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityBilling.InvoiceApproval", b =>
                {
                    b.HasOne("ErpSwiftCore.Domain.Entities.EntityBilling.Invoice", "Invoice")
                        .WithMany("Approvals")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ErpSwiftCore.SharedKernel.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityBilling.InvoiceDiscount", b =>
                {
                    b.HasOne("ErpSwiftCore.Domain.Entities.EntityBilling.Invoice", "Invoice")
                        .WithMany("Discounts")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ErpSwiftCore.SharedKernel.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityBilling.InvoiceLine", b =>
                {
                    b.HasOne("ErpSwiftCore.Domain.Entities.EntityBilling.Invoice", "Invoice")
                        .WithMany("Lines")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ErpSwiftCore.Domain.Entities.EntityProduct.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ErpSwiftCore.SharedKernel.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Invoice");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityBilling.InvoiceTax", b =>
                {
                    b.HasOne("ErpSwiftCore.Domain.Entities.EntityBilling.Invoice", "Invoice")
                        .WithMany("Taxes")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ErpSwiftCore.SharedKernel.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityBilling.Order", b =>
                {
                    b.HasOne("ErpSwiftCore.SharedKernel.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ErpSwiftCore.Domain.Entities.EntityBilling.Party", "Party")
                        .WithMany("Orders")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ErpSwiftCore.SharedKernel.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Currency");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityBilling.OrderLine", b =>
                {
                    b.HasOne("ErpSwiftCore.Domain.Entities.EntityBilling.Order", "Order")
                        .WithMany("OrderLines")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ErpSwiftCore.Domain.Entities.EntityProduct.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ErpSwiftCore.SharedKernel.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityBilling.Party", b =>
                {
                    b.HasOne("ErpSwiftCore.Domain.Entities.EntityCRM.Customer", "Customer")
                        .WithOne()
                        .HasForeignKey("ErpSwiftCore.Domain.Entities.EntityBilling.Party", "CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ErpSwiftCore.Domain.Entities.EntityCRM.Supplier", "Supplier")
                        .WithOne()
                        .HasForeignKey("ErpSwiftCore.Domain.Entities.EntityBilling.Party", "SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ErpSwiftCore.SharedKernel.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Customer");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityBilling.Payment", b =>
                {
                    b.HasOne("ErpSwiftCore.Domain.Entities.EntityBilling.Invoice", "Invoice")
                        .WithMany("Payments")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ErpSwiftCore.SharedKernel.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityCRM.Customer", b =>
                {
                    b.HasOne("ErpSwiftCore.SharedKernel.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("ErpSwiftCore.SharedKernel.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("CustomerID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("CustomerID");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerID");
                        });

                    b.OwnsOne("ErpSwiftCore.SharedKernel.ValueObjects.Contact", "ContactInfo", b1 =>
                        {
                            b1.Property<Guid>("CustomerID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Email")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Fax")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Mobile")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Other")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Phone")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Website")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("CustomerID");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerID");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("ContactInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityCRM.Supplier", b =>
                {
                    b.HasOne("ErpSwiftCore.SharedKernel.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("ErpSwiftCore.SharedKernel.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("SupplierID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("SupplierID");

                            b1.ToTable("Suppliers");

                            b1.WithOwner()
                                .HasForeignKey("SupplierID");
                        });

                    b.OwnsOne("ErpSwiftCore.SharedKernel.ValueObjects.Contact", "ContactInfo", b1 =>
                        {
                            b1.Property<Guid>("SupplierID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Email")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Fax")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Mobile")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Other")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Phone")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Website")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("SupplierID");

                            b1.ToTable("Suppliers");

                            b1.WithOwner()
                                .HasForeignKey("SupplierID");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("ContactInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityFinancial.Account", b =>
                {
                    b.HasOne("ErpSwiftCore.SharedKernel.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ErpSwiftCore.SharedKernel.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityFinancial.CostCenter", b =>
                {
                    b.HasOne("ErpSwiftCore.SharedKernel.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityFinancial.CustomFinancialReportResult", b =>
                {
                    b.HasOne("ErpSwiftCore.SharedKernel.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityFinancial.JournalEntry", b =>
                {
                    b.HasOne("ErpSwiftCore.SharedKernel.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityFinancial.JournalEntryLine", b =>
                {
                    b.HasOne("ErpSwiftCore.Domain.Entities.EntityFinancial.Account", "Account")
                        .WithMany("JournalEntryLines")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ErpSwiftCore.Domain.Entities.EntityFinancial.CostCenter", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ErpSwiftCore.Domain.Entities.EntityFinancial.JournalEntry", "JournalEntry")
                        .WithMany("Lines")
                        .HasForeignKey("JournalEntryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ErpSwiftCore.SharedKernel.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Company");

                    b.Navigation("CostCenter");

                    b.Navigation("JournalEntry");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityInventory.InventoryAdjustment", b =>
                {
                    b.HasOne("ErpSwiftCore.Domain.Entities.EntityProduct.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ErpSwiftCore.SharedKernel.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ErpSwiftCore.Domain.Entities.EntityInventory.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityInventory.StockTransfer", b =>
                {
                    b.HasOne("ErpSwiftCore.Domain.Entities.EntityInventory.Warehouse", "FromWarehouse")
                        .WithMany()
                        .HasForeignKey("FromWarehouseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ErpSwiftCore.Domain.Entities.EntityProduct.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ErpSwiftCore.SharedKernel.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ErpSwiftCore.Domain.Entities.EntityInventory.Warehouse", "ToWarehouse")
                        .WithMany()
                        .HasForeignKey("ToWarehouseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("FromWarehouse");

                    b.Navigation("Product");

                    b.Navigation("ToWarehouse");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityInventory.Warehouse", b =>
                {
                    b.HasOne("ErpSwiftCore.SharedKernel.Entities.CompanyBranch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ErpSwiftCore.SharedKernel.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityLogging.LogEntry", b =>
                {
                    b.HasOne("ErpSwiftCore.SharedKernel.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityNotification.Notification", b =>
                {
                    b.HasOne("ErpSwiftCore.SharedKernel.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityProduct.Product", b =>
                {
                    b.HasOne("ErpSwiftCore.Domain.Entities.EntityProduct.ProductCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("ErpSwiftCore.SharedKernel.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ErpSwiftCore.SharedKernel.Entities.UnitOfMeasurement", "UnitOfMeasurement")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasurementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Company");

                    b.Navigation("UnitOfMeasurement");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityProduct.ProductBundle", b =>
                {
                    b.HasOne("ErpSwiftCore.Domain.Entities.EntityProduct.Product", "ComponentProduct")
                        .WithMany()
                        .HasForeignKey("ComponentProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ErpSwiftCore.Domain.Entities.EntityProduct.Product", "ParentProduct")
                        .WithMany()
                        .HasForeignKey("ParentProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ErpSwiftCore.SharedKernel.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ErpSwiftCore.SharedKernel.Entities.UnitOfMeasurement", "UnitOfMeasurement")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasurementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");

                    b.Navigation("ComponentProduct");

                    b.Navigation("ParentProduct");

                    b.Navigation("UnitOfMeasurement");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityProduct.ProductCategory", b =>
                {
                    b.HasOne("ErpSwiftCore.Domain.Entities.EntityProduct.ProductCategory", "ParentCategory")
                        .WithMany()
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ErpSwiftCore.SharedKernel.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityProduct.ProductPrice", b =>
                {
                    b.HasOne("ErpSwiftCore.SharedKernel.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ErpSwiftCore.Domain.Entities.EntityProduct.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ErpSwiftCore.SharedKernel.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Currency");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityProduct.ProductTax", b =>
                {
                    b.HasOne("ErpSwiftCore.Domain.Entities.EntityProduct.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ErpSwiftCore.SharedKernel.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityProduct.ProductUnitConversion", b =>
                {
                    b.HasOne("ErpSwiftCore.SharedKernel.Entities.UnitOfMeasurement", "FromUnit")
                        .WithMany()
                        .HasForeignKey("FromUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ErpSwiftCore.Domain.Entities.EntityProduct.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ErpSwiftCore.SharedKernel.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ErpSwiftCore.SharedKernel.Entities.UnitOfMeasurement", "ToUnit")
                        .WithMany()
                        .HasForeignKey("ToUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("FromUnit");

                    b.Navigation("Product");

                    b.Navigation("ToUnit");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.EntityCompany.CompanySettings", b =>
                {
                    b.HasOne("ErpSwiftCore.SharedKernel.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ErpSwiftCore.SharedKernel.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ErpSwiftCore.Domain.Entities.EntityFinancial.Account", "DefaultARAccount")
                        .WithMany()
                        .HasForeignKey("DefaultARAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ErpSwiftCore.Domain.Entities.EntityFinancial.Account", "DefaultCashAccount")
                        .WithMany()
                        .HasForeignKey("DefaultCashAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ErpSwiftCore.Domain.Entities.EntityFinancial.Account", "DefaultDiscountsAccount")
                        .WithMany()
                        .HasForeignKey("DefaultDiscountsAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ErpSwiftCore.Domain.Entities.EntityFinancial.Account", "DefaultRevenueAccount")
                        .WithMany()
                        .HasForeignKey("DefaultRevenueAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ErpSwiftCore.Domain.Entities.EntityFinancial.Account", "DefaultTaxPayableAccount")
                        .WithMany()
                        .HasForeignKey("DefaultTaxPayableAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ErpSwiftCore.Domain.Entities.EntityFinancial.Account", "PayrollDeductionsAccount")
                        .WithMany()
                        .HasForeignKey("PayrollDeductionsAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ErpSwiftCore.Domain.Entities.EntityFinancial.Account", "PayrollPayableAccount")
                        .WithMany()
                        .HasForeignKey("PayrollPayableAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ErpSwiftCore.Domain.Entities.EntityFinancial.Account", "SalaryExpenseAccount")
                        .WithMany()
                        .HasForeignKey("SalaryExpenseAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Currency");

                    b.Navigation("DefaultARAccount");

                    b.Navigation("DefaultCashAccount");

                    b.Navigation("DefaultDiscountsAccount");

                    b.Navigation("DefaultRevenueAccount");

                    b.Navigation("DefaultTaxPayableAccount");

                    b.Navigation("PayrollDeductionsAccount");

                    b.Navigation("PayrollPayableAccount");

                    b.Navigation("SalaryExpenseAccount");
                });

            modelBuilder.Entity("ErpSwiftCore.SharedKernel.Entities.Company", b =>
                {
                    b.OwnsOne("ErpSwiftCore.SharedKernel.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("CompanyID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("CompanyID");

                            b1.ToTable("Companies");

                            b1.WithOwner()
                                .HasForeignKey("CompanyID");
                        });

                    b.OwnsOne("ErpSwiftCore.SharedKernel.ValueObjects.Contact", "ContactInfo", b1 =>
                        {
                            b1.Property<Guid>("CompanyID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Email")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Fax")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Mobile")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Other")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Phone")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Website")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("CompanyID");

                            b1.ToTable("Companies");

                            b1.WithOwner()
                                .HasForeignKey("CompanyID");
                        });

                    b.Navigation("Address");

                    b.Navigation("ContactInfo");
                });

            modelBuilder.Entity("ErpSwiftCore.SharedKernel.Entities.CompanyBranch", b =>
                {
                    b.HasOne("ErpSwiftCore.SharedKernel.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("ErpSwiftCore.SharedKernel.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("CompanyBranchID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("CompanyBranchID");

                            b1.ToTable("Branches");

                            b1.WithOwner()
                                .HasForeignKey("CompanyBranchID");
                        });

                    b.OwnsOne("ErpSwiftCore.SharedKernel.ValueObjects.Contact", "ContactInfo", b1 =>
                        {
                            b1.Property<Guid>("CompanyBranchID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Email")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Fax")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Mobile")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Other")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Phone")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Website")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("CompanyBranchID");

                            b1.ToTable("Branches");

                            b1.WithOwner()
                                .HasForeignKey("CompanyBranchID");
                        });

                    b.Navigation("Address");

                    b.Navigation("Company");

                    b.Navigation("ContactInfo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ErpSwiftCore.Domain.Entities.EntityAuth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ErpSwiftCore.Domain.Entities.EntityAuth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ErpSwiftCore.Domain.Entities.EntityAuth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ErpSwiftCore.Domain.Entities.EntityAuth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.AggregateRoots.AggregateInventoryRoots.Inventory", b =>
                {
                    b.Navigation("Policy")
                        .IsRequired();

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityAuth.ApplicationUser", b =>
                {
                    b.Navigation("ActivityLogs");

                    b.Navigation("SecurityAlerts");

                    b.Navigation("Sessions");

                    b.Navigation("SocialAccounts");

                    b.Navigation("TrustedDevices");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityBilling.Invoice", b =>
                {
                    b.Navigation("Approvals");

                    b.Navigation("Discounts");

                    b.Navigation("Lines");

                    b.Navigation("Payments");

                    b.Navigation("Taxes");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityBilling.Order", b =>
                {
                    b.Navigation("OrderLines");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityBilling.Party", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityFinancial.Account", b =>
                {
                    b.Navigation("JournalEntryLines");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityFinancial.JournalEntry", b =>
                {
                    b.Navigation("Lines");
                });

            modelBuilder.Entity("ErpSwiftCore.Domain.Entities.EntityInventory.Warehouse", b =>
                {
                    b.Navigation("Inventories");
                });
#pragma warning restore 612, 618
        }
    }
}
